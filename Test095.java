/*======================================
	■■■ 클래스와 인스턴스 ■■■
		- 클래스 설계
		- 배열 활용
		- 정보 은닉과 접근제어지시자
  ======================================*/

// 사용자로부터 년, 월, 일을 입력 받아
// 해당 날짜의 요일을 출력하는 프로그램을 구현한다.
// 단, 달력 클래스(calender)는 사용하지 않는다
// 또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다. (→WeekDay 클래스 설계)
// 그리고, 배열의 개념도 적용시켜 작성할 수 있도록 한다.
// 접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
// 최종적으로..  WeekDay클래스 설계를 통해
// Test085클래스의 main()메소드가 정상적으로 프로그램 시행될 수 있도록 한다.

//실행 예)
// 년 월 일 입력(공백구분) : 1996 8 16

// 1996년 8월 16일 → x요일
// 계속하려면 아무키나 누르세요...

// ※ 1년 1월 1일 → 월요일
// ※ 1년은 365일이 아닐 때도 있다.

import java.util.Scanner;

class WeekDay
{
	//주요 변수 선언
	private int y, m, d;	//사용자가 입력한 년, 월, 일 담을 변수 선언
	

	//메소드 정의 → 입력받기(input)
	public void input(){
		Scanner sc = new Scanner(System.in);

		System.out.print("년 월 일 입력(공백구분) : ");
		y = sc.nextInt();	//년
		m = sc.nextInt();	//월
		d = sc.nextInt();	//일	
	}

	//메소드 정의 → 요일 산출하기(week)
	public String week(){
		//각 월의 마지막 날짜(각 월의 최대값)을 배열 형태로 구성
		int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		
		//테스트
		//System.out.println(months.length);
		//==> 12 → 12개의 months (달)이 제대로 들어갔다
		
		//요일에 대한 배열 구성
		String[] weekNames={"일","월", "화", "수", "목", "금","토"};

		//날 수를 종합할 변수
		int nalsu=0;

// ※ 2월이 28일까지 있는 해 → 평년
//			29일까지 있는 해 → 윤년
// ※  윤년의 판별 조건
//		연도가 4의 배수이면서 100의 배수가 아니거나,
//		400의 배수이면 윤년
//		그렇지 않으면 평년!

		if (y%4==0 && y%100!=0 || y%400==0) //윤년이라면
		{
			months[1] = 29;
		}else{	//평년이라면
			months[1] = 28;
		}
/* [내가 푼 코드] 
		//전체 날 수 
		//① nalsu = 1.1.1 ~ 1995.12.31
		//② nalsu += 1996.1.1 ~ 1996.7.31
		//③ nalsu += 1996.8.1 ~ 1996.7.16
		nalsu = (y-1)*365+ (y-1)/4 - (y-1)/100 + (y-1)/400; //①
		
		for (int i= 0; i<(m-1); i++) //②
		{
			nalsu += months[i];
		}

		nalsu += d; //③
		
		//System.out.println("날 수 합: "+nalsu);  //test

		int a = nalsu%7;

		return result[a];
*/
		//[함께 푼 코드]***************************
		//① 1년 1월 1일부터 입력받은 년도의 이전 년도 12월 31일까지의 날 수 계산
		//					 -------------------------
		//							 y-1
		// 2021.7.30 → 1.1.1 ~ 2020.12.31
		nalsu = (y-1)*365+ (y-1)/4 - (y-1)/100 + (y-1)/400;

		//테스트
		//System.out.println("날 수 : "+nalsu);
		// ==> 년 월 일 입력(공백구분) : 2021 7 30
		//		날 수 : 737790 (1.1.1 ~ 2020.12.31의 총 날 수)

		//② 입력받은 월의 이전 월 까지의 날 수 계산 후
		//	이 계산 결과를 1번의 결과에 더하는 연산
		for (int i=0; i<(m-1); i++)
			nalsu += months[i];
		
		//③ 입력받은 일의 날짜만큼 날 수 계산 후
		//	 2번 결과에 더하는 연산
		nalsu += d;

		//테스트
		//System.out.println("날 수 : "+nalsu);
		// ==> 년 월 일 입력(공백구분) : 2021 7 30
		//		날 수 : 738001 (1.1.1 ~ 2020.7.30의 총 날 수)
		
		//---------------------------------------여기까지 수행하면 날 수 연산 끝~~~!

		//무슨 요일인지 확인하기 위한 연산
		int w = nalsu %7;		// 전체날수 % 7 == 0 → 일요일
								// 전체날수 % 7 == 1 → 월요일

		//테스트
		//System.out.println("요일 : "+nalsu);	
		// ==> 년 월 일 입력(공백구분) : 2021 7 30
		//		날 수 : 738001 (1.1.1 ~ 2020.7.30의 총 날 수)
				

		return weekNames[w];

	}


	//메소드 정의 → 결과 출력하기(print)
	public void print(String day){
		System.out.printf("%d년 %d월 %d일 → %s요일\n",y,m,d,day);
	}

}


public class Test095{
	public static void main(String[]args){

		WeekDay ob = new WeekDay();
		
		ob.input();
		
		//ob.week();
		String result = ob.week(); //요일 산출
		
		ob.print(result); //결과 출력

	}
}

/*
년 월 일 입력(공백구분) : 1996 8 16
1996년 8월 16일 → 금요일
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백구분) : 2021 12 24
2021년 12월 24일 → 금요일
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백구분) : 2021 7 30
2021년 7월 30일 → 금요일
계속하려면 아무 키나 누르십시오 . . .
*/